# 模板的名字，生成代码的根目录名称
name: mybatis-mapper
# 代码生成的路径，可以使用 SYS 和 ENV 等变量，具体包含的内容和运行环境有关
# user.dir 为当前运行命令的目录，path 不设置时的默认值也是当前路径，在命令行中可以通过 —o 重新指定位置
# 当 path 路径以 .zip 后缀结尾时，会将生成的目录结构和代码放到压缩包中
path: ${SYS['user.dir']}/../../
# 模板文件所在路径，默认为相对 path 所在的位置，不设置时和 path 相同
templates: mapper-templates
# 数据库配置
database:
  # 数据库连接配置
  jdbcConnection:
    # 使用方言，默认为 JDBC 方式，可能会取不到表或字段注释
    # 后续介绍如何通过字典匹配注释值
    dialect: MYSQL
    # jdbc驱动
    driver: com.mysql.jdbc.Driver
    # jdbc连接地址
    url: jdbc:mysql://localhost:3306/antdv-pro?useSSL=false
    # 用户名
    user: root
    # 密码
    password: 123456
  # 获取表配置，支持 % 和 _ 模糊匹配，可以配置多个值
  # 还有一个支持复杂规则 tableRules 属性后续单独介绍
  tables:
    - '%'
  # 根据类型对字段类型打标签, 可以通过 column.tags.TAG 的 true/false 来判断当前列是否有该标签
  # 主要对列进行分类，方便后续模板中的使用
  typeTags:
    # 示例，针对日期时间设置 jdbcType 标签，生成的代码中，如果有该标签，会指定 jdbcType 的值
    jdbcType:
      - DATE
      - TIME
      - TIMESTAMP
  # 关键字包装，这里的示例针对 MySQL，不提供默认值，需要根据数据库语法进行设置，其中的 %s 为关键字（表名或列名）
  keywordWrap: "`%s`"
  # 数据库关键字，列举的关键字会进行包装处理，没有默认值，需要自己配置所有可能的关键字
  keywords:
    - order
    - desc
# 附加属性
attrs: # 子目录（文件）可以通过 parent.parent...attrs.属性名 可以逐级向上使用属性
  # 这里设置了一个基础包名
  basePackage: org.zooway.antdvpro
# 子目录（文件）
files:
  # 文件名，可以 / 设置多级目录
  - name: src/main
    # 子目录（文件）
    files:
      - name: java
        files:
          # 包，可以多层，名称可以引用当前结构的所有属性，也可以使用 tables 数据表信息
          - name: '${project.attrs.basePackage}'
            # 设置类型为 package，尽可能都指定，默认会计算，默认为目录。包下面的默认都是包
            type: PACKAGE
            files:
              # 包名
              - name: mapper
                files:
                  # 模板文件，下面 iter 对 tables 所有表进行迭代，因此这里的模板会根据表的数量进行循环生成
                  # 迭代循环时，单个迭代对象的默认名为 it，因此这里的 name 就是表名（类名形式）为前缀的 Mapper 接口
                  - name: '${it.name.className}Mapper.java'
                    # 使用的模板名，会从上面配置的 templates 下面查找
                    # 包含多级目录时，这里可以指定相对 templates 的路径
                    file: mapper.java
                    # 可选配置 iter, 迭代的数据对象，当前可选为 tables 为反射的数据库表信息
                    # iter 值使用 mvel 表达式取值，除 tables 外也可以对当前 yaml 中的集合类型进行迭代，例如 project.files
                    iter: tables
                    # 可选配置 iterName，默认值为 it，在模板和上面的 name 中可以使用改变量的值
                    # iterName: it
                    # 可选配置 filter, 绑定数据过滤器，使用 mvel 表达式，过滤条件不满足时不执行当前的操作，不生成相应的目录或文件
                    # filter: tables.size() > 0 # 仅仅是示例，size=0时本身也不会循环
                    # 可选配置 itFilter，迭代数据过滤器，使用 mvel 表达式，当指定 iter 时，对迭代的数据进行过滤
                    # 不满足条件时，只忽略当前的 it 数据，下面示例中当表名以 sys 为前缀时生成目录或代码
                    # iterFilter: it.name.original.o.startsWith("sys")
                    # 可选配置 enabled，默认 true，当前目录（文件）有效，会生成，设置为 false 时忽略
                    # enabled: true
                    # 可选配置 mode，默认值为 OVERRIDE，生成目录或文件时覆盖，可选值为:
                    # OVERRIDE: 覆盖
                    # ONCE: 只生成一次，或者如果目录或文件已存在时不生成(目录存在时，子文件也不会生成）
                    # MERGE: 合并已存在的文件和新生成的文件，需要满足规则才能合并
                    # mode: OVERRIDE
                    # 可选配置 times，默认值 1，默认情况下，模板只经过一次变量替换，有时存在多层变量嵌套时，执行多次才能全部替换
                    # times: 1
              - name: model
                files:
                  - name: '${it.name.className}.java'
                    # 此处有2种模板示例，分别列出来加了注释
                    #                    file: model.java
                    file: model-lombok.java
                    iter: tables
      #              - name: service
      #                files:
      #                  - name: '${it.name.className}Service.java'
      #                    file: service.java
      #                    iter: tables
      #                  - name: impl
      #                    files:
      #                      - name: '${it.name.className}ServiceImpl.java'
      #                        file: serviceImpl.java
      #                        iter: tables
      #              - name: controller
      #                files:
      #                  - name: '${it.name.className}Controller.java'
      #                    file: controller.java
      #                    iter: tables
      - name: resources
        files:
          - name: 'mappers'
            files:
              - name: '${it.name.className}Mapper.xml'
                iter: tables
                file: mapper.xml